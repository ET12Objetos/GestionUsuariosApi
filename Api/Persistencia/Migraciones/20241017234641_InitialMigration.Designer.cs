// <auto-generated />
using System;
using Api.Persistencia;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Persistencia.Migraciones
{
    [DbContext(typeof(GestionUsuariosDbContext))]
    [Migration("20241017234641_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Aplicacion.Dominio.Rol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreacionFecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreacionUsuario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Rol");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e0bd340d-bd4b-4c3b-a5b1-dc2ae8b73ebf"),
                            CreacionFecha = new DateTime(2024, 10, 17, 23, 46, 41, 342, DateTimeKind.Utc).AddTicks(2168),
                            CreacionUsuario = "",
                            Habilitado = true,
                            Nombre = "Administrador"
                        },
                        new
                        {
                            Id = new Guid("8c68b8a6-69f2-48a8-bcee-aea9daca0e7d"),
                            CreacionFecha = new DateTime(2024, 10, 17, 23, 46, 41, 342, DateTimeKind.Utc).AddTicks(2178),
                            CreacionUsuario = "",
                            Habilitado = true,
                            Nombre = "Vendedor"
                        },
                        new
                        {
                            Id = new Guid("546cb1f1-0ce9-4074-a410-502e000c4f8b"),
                            CreacionFecha = new DateTime(2024, 10, 17, 23, 46, 41, 342, DateTimeKind.Utc).AddTicks(2188),
                            CreacionUsuario = "",
                            Habilitado = true,
                            Nombre = "Legales"
                        });
                });

            modelBuilder.Entity("Aplicacion.Dominio.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreacionFecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreacionUsuario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            Id = new Guid("09a97ece-7e03-43b8-813f-39456bab8a00"),
                            Contraseña = "pass123",
                            CreacionFecha = new DateTime(2024, 10, 17, 23, 46, 41, 342, DateTimeKind.Utc).AddTicks(2109),
                            CreacionUsuario = "",
                            Email = "",
                            Habilitado = true,
                            Nombre = "Juan123",
                            NombreCompleto = "Juan Perez"
                        },
                        new
                        {
                            Id = new Guid("2a985321-0fa5-46d5-b63b-ede41b5de713"),
                            Contraseña = "pass123",
                            CreacionFecha = new DateTime(2024, 10, 17, 23, 46, 41, 342, DateTimeKind.Utc).AddTicks(2121),
                            CreacionUsuario = "",
                            Email = "",
                            Habilitado = true,
                            Nombre = "Pablo123",
                            NombreCompleto = "Pablo Lopez"
                        });
                });

            modelBuilder.Entity("RolUsuario", b =>
                {
                    b.Property<Guid>("IdRol")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uuid");

                    b.HasKey("IdRol", "IdUsuario");

                    b.HasIndex("IdUsuario");

                    b.ToTable("RolUsuario");
                });

            modelBuilder.Entity("RolUsuario", b =>
                {
                    b.HasOne("Aplicacion.Dominio.Rol", null)
                        .WithMany()
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aplicacion.Dominio.Usuario", null)
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
